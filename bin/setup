#!/usr/bin/env python3
import subprocess

def install_postgres():
    print("Installing PostgreSQL...")
    try:
        brewupdate = subprocess.Popen(['brew', 'update'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        brewinstall = subprocess.Popen(['brew', 'install', 'postgresql'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    except Exception as e:
        print(f'Error during installation: {e}')
        raise Exception(e)
    print("Initiating database")
    try:
        dbinit = subprocess.Popen(['initdb', '/usr/local/var/postgres'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    except Exception as e:
        print(f'Error during database initiation: {e}')
        raise Exception(e)
    return

def create_database():
    # check if Postgres is running
    try:
        db_status = subprocess.Popen(['pg_ctl', '-D', '/usr/local/var/postgres', 'status'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    except Exception as e:
        print(f'Error starting PostgreSQL: {e}')
        raise Exception(e)
    stdout, stderr = db_status.communicate()
    print(stdout.decode('UTF-8') if stdout is not None else "No stdout")
    # if no server running
    if '(PID:' not in stdout.decode('UTF-8'):
        try:
            startdb_status = subprocess.Popen(['pg_ctl', '-D', '/usr/local/var/postgres', 'start'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        except Exception as e:
            print(f'Error starting PostgreSQL: {e}')
            raise Exception(e)
        stdout, stderr = startdb_status.communicate()
        print(stdout.decode('UTF-8') if stdout is not None else "No stdout")
    # check if ugms database exists
    try:
        db_exists = subprocess.Popen(['psql', '-lqt'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    except Exception as e:
        print(f'Error starting PostgreSQL: {e}')
        raise Exception(e)
    stdout, stderr = db_exists.communicate()
    print(stdout.decode('UTF-8') if stdout is not None else "No stdout")
    if 'ugms' not in stdout.decode('UTF-8'):
        try:
            createdb_status = subprocess.Popen(['createdb', 'ugms'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        except Exception as e:
            print(f'Error creating database ugms: {e}')
            raise Exception(e)
        stdout, stderr = createdb_status.communicate()
        print(stdout.decode('UTF-8') if stdout is not None else "No stdout")
    return

def setup():
    # check if Homebrew is installed
    print("Checking if Homebrew is installed...")
    try:
        brew_status = subprocess.Popen(['brew', '--version'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    except OSError as err:
        print(f'OS Error: {err}')
        print("Check to make sure Homebrew is installed properly. Get Homebrew at https://brew.sh/")
        return
    stdout, stderr = brew_status.communicate()
    print(stdout.decode('UTF-8'))
    
    # check if PostgreSQL is installed
    print("Checking PostgreSQL installation...")
    try:
        psql_install = subprocess.Popen(['postgres', '--version'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    except OSError: # no installation found
        print("No PostgreSQL installation found.")
        install_postgres()
    stdout, stderr = psql_install.communicate()
    print(stdout.decode('UTF-8'))

    # create UGMS database
    print("Starting PostgreSQL and creating database 'ugms'")
    create_database()
    
    # install NPM packages
    print("Checking NPM packages...")
    try:
        npm_install = subprocess.Popen(['npm', 'install'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    except OSError as err:
        print(f'OS Error: {err}')
        print("Check to make sure NPM is installed properly. Get NPM and Node at https://nodejs.org/")
        return
    stdout, stderr = npm_install.communicate()
    print(stdout.decode('UTF-8'))

if __name__ == '__main__':
    setup()